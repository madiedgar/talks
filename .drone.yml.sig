eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgICBpbmZvcm1TdGFydDoKICAgICAgICBpbWFnZTogcGx1Z2lucy9zbGFjawogICAgICAgIGNoYW5uZWw6IGNpCiAgICAgICAgdGVtcGxhdGU6IHwKICAgICAgICAgICAgW3t7IHJlcG8ubmFtZSB9fS97eyBidWlsZC5icmFuY2ggfX0gOjogI3t7IGJ1aWxkLm51bWJlciB9fV06IFN0YXJ0aW5nIQoKICAgIGJ1aWxkVGVzdDoKICAgICAgICBpbWFnZTogcXVheS5pby9nb2xmbm93L25vZGU6Ni45LjItMjAxNjEyMTMuMAogICAgICAgIGNvbW1hbmRzOgogICAgICAgICAgICAtIG5wbSBpbnN0YWxsCiAgICAgICAgICAgIC0gLi9ub2RlX21vZHVsZXMvbGFiL2Jpbi9sYWIgLWEgY29kZSAtdCAxMDAgLS1saW50CiAgICAgICAgd2hlbjoKICAgICAgICAgICAgZXZlbnQ6IHB1c2gKCiAgICBkb2NrZXJpemU6CiAgICAgICAgaW1hZ2U6IHF1YXkuaW8vZ29sZm5vdy9kcm9uZS1kb2NrZXIKICAgICAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICAgICAgcmVnaXN0cnk6IHF1YXkuaW8KICAgICAgICByZXBvOiBxdWF5LmlvL2dvbGZub3cvPEAgLk5hbWUgQD4KICAgICAgICB0YWdzOgogICAgICAgICAgICAtIDEuMC4wLiR7RFJPTkVfQlVJTERfTlVNQkVSfQogICAgICAgIGJ1aWxkX2FyZ3M6CiAgICAgICAgICAgIC0gTlBNX1RPS0VOPXtOUE1fVE9LRU59CiAgICAgICAgd2hlbjoKICAgICAgICAgICAgZXZlbnQ6IHB1c2gKCiAgICBkb2NrZXJpemU6CiAgICAgICAgaW1hZ2U6IHF1YXkuaW8vZ29sZm5vdy9kcm9uZS1kb2NrZXIKICAgICAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICAgICAgcmVnaXN0cnk6IHF1YXkuaW8KICAgICAgICByZXBvOiBxdWF5LmlvL2dvbGZub3cvPEAgLk5hbWUgQD4KICAgICAgICB0YWdzOgogICAgICAgICAgICAtIDEuMC4wLiR7RFJPTkVfQlVJTERfTlVNQkVSfQogICAgICAgICAgICAtIHByb2R1Y3Rpb24KICAgICAgICBidWlsZF9hcmdzOgogICAgICAgICAgICAtIE5QTV9UT0tFTj17TlBNX1RPS0VOfQogICAgICAgIHdoZW46CiAgICAgICAgICAgIGV2ZW50OiB0YWcKCiAgICBkZXBsb3lTdGFnZToKICAgICAgICBpbWFnZTogcXVheS5pby9nb2xmbm93L2t1YmUtZGVwbG95CiAgICAgICAgcHVsbDogdHJ1ZQogICAgICAgIHRhcmdldHM6CiAgICAgICAgICAgIC0gPEAgLk5hbWUgQD4tZzEtY3VzdG9tZXIKICAgICAgICAgICAgLSA8QCAuTmFtZSBAPi1nMS1vcmRlci1pdGVtCiAgICAgICAgICAgIC0gPEAgLk5hbWUgQD4tZzEtb3JkZXJzCiAgICAgICAgICAgIC0gPEAgLk5hbWUgQD4tZzEtcmVzCiAgICAgICAgdHlwZTogZGVwbG95bWVudAogICAgICAgIHRhZzogcXVheS5pby9nb2xmbm93LzxAIC5OYW1lIEA-OjEuMC4wLiR7RFJPTkVfQlVJTERfTlVNQkVSfQogICAgICAgIGluc2VjdXJlOiB0cnVlCiAgICAgICAgdXNlX2Vudmlyb25tZW50OiBxYQogICAgICAgIGZ1bmN0aW9uczoKICAgICAgICAgICAgLSBhbm5vdGF0ZQogICAgICAgIHdoZW46CiAgICAgICAgICAgIGV2ZW50OiBwdXNoCgogICAgZGVwbG95UHJvZDoKICAgICAgICBpbWFnZTogcXVheS5pby9nb2xmbm93L2t1YmUtZGVwbG95CiAgICAgICAgcHVsbDogdHJ1ZQogICAgICAgIHRhcmdldHM6CiAgICAgICAgICAgIC0gPEAgLk5hbWUgQD4tZzEtY3VzdG9tZXIKICAgICAgICAgICAgLSA8QCAuTmFtZSBAPi1nMS1vcmRlci1pdGVtCiAgICAgICAgICAgIC0gPEAgLk5hbWUgQD4tZzEtb3JkZXJzCiAgICAgICAgICAgIC0gPEAgLk5hbWUgQD4tZzEtcmVzCiAgICAgICAgdHlwZTogZGVwbG95bWVudAogICAgICAgIHRhZzogcXVheS5pby9nb2xmbm93LzxAIC5OYW1lIEA-OjEuMC4wLiR7RFJPTkVfQlVJTERfTlVNQkVSfQogICAgICAgIGluc2VjdXJlOiB0cnVlCiAgICAgICAgdXNlX2Vudmlyb25tZW50OiBwcmQKICAgICAgICBmdW5jdGlvbnM6CiAgICAgICAgICAgIC0gYW5ub3RhdGUKICAgICAgICB3aGVuOgogICAgICAgICAgICBldmVudDogdGFnCgogICAgaW5mb3JtRW5kOgogICAgICAgIGltYWdlOiBwbHVnaW5zL3NsYWNrCiAgICAgICAgY2hhbm5lbDogY2kKICAgICAgICB0ZW1wbGF0ZTogfAogICAgICAgICAgICBbe3sgcmVwby5uYW1lIH19L3t7IGJ1aWxkLmJyYW5jaCB9fSA6OiAje3sgYnVpbGQubnVtYmVyIH19XToge3sgYnVpbGQuc3RhdHVzIH19IGFmdGVyIHt7c2luY2UgYnVpbGQuc3RhcnRlZH19CiAgICAgICAgd2hlbjoKICAgICAgICAgICAgc3RhdHVzOiBbIHN1Y2Nlc3MsIGZhaWx1cmUgXQo.EF1lIeP6uX-scdMsY8nIfyEjmfstysvCzt5RlyNZ5ok